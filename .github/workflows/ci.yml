name: BUILD

on:
  push:
      branches: [plugin-danmaku]
  workflow_dispatch:

jobs:
  build:
    # FIXME: This builds with macOS 10.15. Move this to the 11.0 builders when possible. (See: https://github.com/actions/virtual-environments/issues/2486)
    runs-on:  macos-latest
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PUBKEY: ${{secrets.SSH_PUBKEY}}
      TUNNEL_HOST: ${{secrets.TUNNEL_HOST}}

    steps:
      - name: SSH Tunnel
        run: |
          mkdir -p $HOME/.ssh
          cat <<< ${SSH_PRIVATE_KEY} > $HOME/.ssh/id_rsa
          cat <<< ${SSH_PUBKEY} > $HOME/.ssh/authorized_keys
          sed 's/-----BEGIN OPENSSH PRIVATE KEY-----/-----BEGIN-OPENSSH-PRIVATE-KEY-----/' ~/.ssh/id_rsa|
          sed 's/-----END OPENSSH PRIVATE KEY-----/-----END-OPENSSH-PRIVATE-KEY-----/' |
          sed "s/ /\n/g"|sed 's/-----BEGIN-OPENSSH-PRIVATE-KEY-----/-----BEGIN OPENSSH PRIVATE KEY-----/'|
          sed 's/-----END-OPENSSH-PRIVATE-KEY-----/-----END OPENSSH PRIVATE KEY-----/'|
          tee  ~/.ssh/id_rsa > /dev/null 2>&1
          chmod 600 $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/authorized_keys
          sed -i "" 's/ssh-rsa/\nssh-rsa/g' $HOME/.ssh/authorized_keys
          chmod 700 $HOME/.ssh
          random_port=$(jot -r 1 20000 65000)
          if [[ -n "${TELEGRAM_BOT_TOKEN}" && -n "${TELEGRAM_CHAT_ID}" ]]; then
              TELEGRAM_LOG="/tmp/telegram.log"
              SSH_CMD="ssh runner@$127.0.0.1 -p $random_port"
              MSG="
              *GitHub Actions - IINA-Danmaku SSH tunnel info:*
              ⚡ *CLI:*
              \`${SSH_CMD}\`
              "
              echo -e "Sending message to Telegram..."
              curl -sSX POST "${TELEGRAM_API_URL:-https://api.telegram.org}/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                  -d "disable_web_page_preview=true" \
                  -d "parse_mode=Markdown" \
                  -d "chat_id=${TELEGRAM_CHAT_ID}" \
                  -d "text=${MSG}" >${TELEGRAM_LOG}
              TELEGRAM_STATUS=$(cat ${TELEGRAM_LOG} | jq -r .ok)
              if [[ ${TELEGRAM_STATUS} != true ]]; then
                  echo -e "Telegram message sending failed: $(cat ${TELEGRAM_LOG})"
              else
                  echo -e "Telegram message sent successfully!"
              fi
          fi
          screen -dmS ngrok bash -c \
              "ssh -CNTR $random_port:127.0.0.1:22 -oStrictHostKeyChecking=no -oServerAliveInterval=30 -oServerAliveCountMax=60 -C ubuntu@${TUNNEL_HOST} -v 2>&1"

      - uses: actions/checkout@v3

      - name: Install dependencies
        run: ./other/download_libs.sh

      # - name: modify scheme
      #   run: |
      #     # sed -i "" 's/dduan/tofuliang/g' Cartfile*
      #     sed -i "" 's/<string>iina<\/string>/<string>iinadv<\/string>/g' iina/Info.plist
      #     sed -i "" 's/if parsed.scheme != "iina"/if parsed.scheme != "iinadv"/g' iina/AppDelegate.swift

      - name: Show Build Version
        run: xcodebuild -version

      - name: Show Build Settings
        run: xcodebuild -showBuildSettings

      - name: Show Build SDK
        run: xcodebuild -showsdks

      - name: Prepare create-dmg
        run: npm install --global create-dmg

      # - name: Build Deps
      #   run: carthage bootstrap --platform macOS --use-xcframeworks

      - name: Build
        run: xcodebuild -project iina.xcodeproj -scheme iina CODE_SIGNING_ALLOWED=NO ONLY_ACTIVE_ARCH=NO -configuration Release

      - name: Pack dmg
        run: |
          mv ~/Library/Developer/Xcode/DerivedData/iina-*/Build/Products/Release/IINA.app IINA-Danmaku.app
          create-dmg IINA-Danmaku.app || true

      - name: 上传 IINA-Danmaku.app
        uses: actions/upload-artifact@v2
        with:
          name: IINA-Danmaku.dmg
          path: |
            *.dmg

      - name: 设置版本号
        run:  echo "ReleaseVersion=`date +%Y%m%d`" >> $GITHUB_ENV

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: ${{ env.ReleaseVersion }}
          title: ${{ env.ReleaseVersion }}
          files: |
            *.dmg

      - name: SSH 连接到 Actions
        uses: P3TERX/ssh2actions@main
        if: ${{ failure() }}
        env:
         TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
         TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
